"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.string.includes.js");

var _react = _interopRequireDefault(require("react"));

var _findIndexAfterMovement = _interopRequireDefault(require("./_lib/findIndexAfterMovement"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const useFieldFormatter = function useFieldFormatter(formatter, onChange) {
  let refProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ref';

  const [position, setPosition] = _react.default.useState(null);

  const inputRef = _react.default.useRef();

  if (typeof onChange !== 'function') {
    throw new TypeError('Argument must be passed for onChange and must be a function that accepts a new value.');
  }

  _react.default.useEffect(() => {
    const input = inputRef.current;

    if (input) {
      input === null || input === void 0 ? void 0 : input.setSelectionRange(position, position);
    }
  }, [inputRef, position]);

  const handleChange = event => {
    const options = {};
    const target = event.target;
    const thisValue = formatter(target.value);
    const diff = thisValue.length - target.value.length;
    const selectionStart = target.selectionStart;
    const selectionEnd = target.selectionEnd;
    const inputType = event.nativeEvent.inputType;
    const isMidText = selectionEnd < thisValue.length - 1;
    let backspaceType = '';

    if (!!inputType && inputType.includes('deleteContent')) {
      backspaceType += inputType.includes('Backward') ? 'backspace' : 'delete';
    }

    const backspaceDetected = backspaceType !== '' && selectionStart === selectionEnd;

    if (backspaceDetected) {
      const optionKey = "".concat(backspaceType, "At");
      options[optionKey] = selectionEnd;
    }

    onChange(formatter(thisValue, options)); // Set caret position

    if (backspaceDetected) {
      const newCaretPosition = (0, _findIndexAfterMovement.default)(thisValue, selectionStart, backspaceType === 'delete');
      setPosition(newCaretPosition);
    } else if (inputType === 'insertText') {
      const endTextPos = selectionEnd + diff;
      const adjustedMidTextPos = (0, _findIndexAfterMovement.default)(thisValue, selectionEnd, true);
      setPosition(isMidText ? adjustedMidTextPos : endTextPos);
    }
  };

  return {
    onChange: handleChange,
    [refProp]: inputRef
  };
};

var _default = useFieldFormatter;
exports.default = _default;