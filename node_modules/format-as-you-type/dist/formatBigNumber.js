"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.parse-float.js");

var _formatString = _interopRequireDefault(require("./formatString"));

var _setDefaultOption = _interopRequireDefault(require("./_lib/setDefaultOption"));

const _excluded = ["prefix", "suffix", "numDecimals"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const formatBigNumber = function formatBigNumber(newInput) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  (0, _setDefaultOption.default)(options, 'prefix', '');
  (0, _setDefaultOption.default)(options, 'suffix', '');
  (0, _setDefaultOption.default)(options, 'numDecimals', 0);

  const {
    prefix,
    suffix,
    numDecimals
  } = options,
        otherOptions = _objectWithoutProperties(options, _excluded);

  const formattedInput = (0, _formatString.default)(newInput, undefined, _objectSpread(_objectSpread({}, otherOptions), {}, {
    customFormatter: i => parseFloat(i).toLocaleString(locale),
    numbersOnly: true
  }));
  return prefix + formattedInput + suffix;
};

var _default = formatBigNumber;
exports.default = _default;