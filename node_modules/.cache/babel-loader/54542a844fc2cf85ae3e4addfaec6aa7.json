{"ast":null,"code":"import _defineProperty from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"status\", \"addRole\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { AlertProvider, AlertStylesProvider, getStatusColorScheme } from \"./chunk-FZCW3KO4.mjs\";\n\n// src/alert.tsx\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Alert = forwardRef(function Alert2(props, ref) {\n  var _a;\n  var _omitThemingProps = omitThemingProps(props),\n    _omitThemingProps$sta = _omitThemingProps.status,\n    status = _omitThemingProps$sta === void 0 ? \"info\" : _omitThemingProps$sta,\n    _omitThemingProps$add = _omitThemingProps.addRole,\n    addRole = _omitThemingProps$add === void 0 ? true : _omitThemingProps$add,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var colorScheme = (_a = props.colorScheme) != null ? _a : getStatusColorScheme(status);\n  var styles = useMultiStyleConfig(\"Alert\", _objectSpread(_objectSpread({}, props), {}, {\n    colorScheme: colorScheme\n  }));\n  var alertStyles = _objectSpread({\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\"\n  }, styles.container);\n  return /* @__PURE__ */jsx(AlertProvider, {\n    value: {\n      status: status\n    },\n    children: /* @__PURE__ */jsx(AlertStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({\n        role: addRole ? \"alert\" : void 0,\n        ref: ref\n      }, rest), {}, {\n        className: cx(\"chakra-alert\", props.className),\n        __css: alertStyles\n      }))\n    })\n  });\n});\nAlert.displayName = \"Alert\";\nexport { Alert };","map":null,"metadata":{},"sourceType":"module"}