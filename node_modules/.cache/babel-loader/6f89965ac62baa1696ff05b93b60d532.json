{"ast":null,"code":"import _classCallCheck from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps as _scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\nvar HTMLVisualElement = /*#__PURE__*/function (_DOMVisualElement) {\n  _inherits(HTMLVisualElement, _DOMVisualElement);\n  var _super = _createSuper(HTMLVisualElement);\n  function HTMLVisualElement() {\n    _classCallCheck(this, HTMLVisualElement);\n    return _super.apply(this, arguments);\n  }\n  _createClass(HTMLVisualElement, [{\n    key: \"readValueFromInstance\",\n    value: function readValueFromInstance(instance, key) {\n      if (transformProps.has(key)) {\n        var defaultType = getDefaultValueType(key);\n        return defaultType ? defaultType.default || 0 : 0;\n      } else {\n        var computedStyle = getComputedStyle(instance);\n        var value = (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n        return typeof value === \"string\" ? value.trim() : value;\n      }\n    }\n  }, {\n    key: \"measureInstanceViewportBox\",\n    value: function measureInstanceViewportBox(instance, _ref) {\n      var transformPagePoint = _ref.transformPagePoint;\n      return measureViewportBox(instance, transformPagePoint);\n    }\n  }, {\n    key: \"build\",\n    value: function build(renderState, latestValues, options, props) {\n      buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n  }, {\n    key: \"scrapeMotionValuesFromProps\",\n    value: function scrapeMotionValuesFromProps(props, prevProps) {\n      return _scrapeMotionValuesFromProps(props, prevProps);\n    }\n  }, {\n    key: \"handleChildMotionValue\",\n    value: function handleChildMotionValue() {\n      var _this = this;\n      if (this.childSubscription) {\n        this.childSubscription();\n        delete this.childSubscription;\n      }\n      var children = this.props.children;\n      if (isMotionValue(children)) {\n        this.childSubscription = children.on(\"change\", function (latest) {\n          if (_this.current) _this.current.textContent = \"\".concat(latest);\n        });\n      }\n    }\n  }, {\n    key: \"renderInstance\",\n    value: function renderInstance(instance, renderState, styleProp, projection) {\n      renderHTML(instance, renderState, styleProp, projection);\n    }\n  }]);\n  return HTMLVisualElement;\n}(DOMVisualElement);\nexport { HTMLVisualElement, getComputedStyle };","map":null,"metadata":{},"sourceType":"module"}