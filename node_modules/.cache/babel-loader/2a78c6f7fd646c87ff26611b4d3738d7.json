{"ast":null,"code":"import * as React from 'react';\nimport PrimeReact, { localeOption } from 'primereact/api';\nimport { CSSTransition } from 'primereact/csstransition';\nimport { useOverlayListener, useUnmountEffect } from 'primereact/hooks';\nimport { InputText } from 'primereact/inputtext';\nimport { OverlayService } from 'primereact/overlayservice';\nimport { Portal } from 'primereact/portal';\nimport { ObjectUtils, DomHandler, ZIndexUtils, classNames } from 'primereact/utils';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar PasswordBase = {\n  defaultProps: {\n    __TYPE: 'Password',\n    id: null,\n    inputId: null,\n    inputRef: null,\n    promptLabel: null,\n    weakLabel: null,\n    mediumLabel: null,\n    strongLabel: null,\n    mediumRegex: '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})',\n    strongRegex: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})',\n    feedback: true,\n    toggleMask: false,\n    appendTo: null,\n    header: null,\n    content: null,\n    footer: null,\n    icon: null,\n    tooltip: null,\n    tooltipOptions: null,\n    style: null,\n    className: null,\n    inputStyle: null,\n    inputClassName: null,\n    panelStyle: null,\n    panelClassName: null,\n    transitionOptions: null,\n    onInput: null,\n    onShow: null,\n    onHide: null,\n    children: undefined\n  },\n  getProps: function getProps(props) {\n    return ObjectUtils.getMergedProps(props, PasswordBase.defaultProps);\n  },\n  getOtherProps: function getOtherProps(props) {\n    return ObjectUtils.getDiffProps(props, PasswordBase.defaultProps);\n  }\n};\nvar Password = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var props = PasswordBase.getProps(inProps);\n  var promptLabel = props.promptLabel || localeOption('passwordPrompt');\n  var weakLabel = props.weakLabel || localeOption('weak');\n  var mediumLabel = props.mediumLabel || localeOption('medium');\n  var strongLabel = props.strongLabel || localeOption('strong');\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    overlayVisibleState = _React$useState2[0],\n    setOverlayVisibleState = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    meterState = _React$useState4[0],\n    setMeterState = _React$useState4[1];\n  var _React$useState5 = React.useState(promptLabel),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    infoTextState = _React$useState6[0],\n    setInfoTextState = _React$useState6[1];\n  var _React$useState7 = React.useState(false),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    focusedState = _React$useState8[0],\n    setFocusedState = _React$useState8[1];\n  var _React$useState9 = React.useState(false),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    unmaskedState = _React$useState10[0],\n    setUnmaskedState = _React$useState10[1];\n  var elementRef = React.useRef(null);\n  var overlayRef = React.useRef(null);\n  var inputRef = React.useRef(props.inputRef);\n  var mediumCheckRegExp = React.useRef(new RegExp(props.mediumRegex));\n  var strongCheckRegExp = React.useRef(new RegExp(props.strongRegex));\n  var type = unmaskedState ? 'text' : 'password';\n  var _useOverlayListener = useOverlayListener({\n      target: elementRef,\n      overlay: overlayRef,\n      listener: function listener(event, _ref) {\n        var valid = _ref.valid;\n        valid && hide();\n      },\n      when: overlayVisibleState\n    }),\n    _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2),\n    bindOverlayListener = _useOverlayListener2[0],\n    unbindOverlayListener = _useOverlayListener2[1];\n  var currentValue = inputRef.current && inputRef.current.value;\n  var isFilled = React.useMemo(function () {\n    return ObjectUtils.isNotEmpty(props.value) || ObjectUtils.isNotEmpty(props.defaultValue) || ObjectUtils.isNotEmpty(currentValue);\n  }, [props.value, props.defaultValue, currentValue]);\n  var updateLabels = function updateLabels() {\n    if (meterState) {\n      var label = null;\n      switch (meterState.strength) {\n        case 'weak':\n          label = weakLabel;\n          break;\n        case 'medium':\n          label = mediumLabel;\n          break;\n        case 'strong':\n          label = strongLabel;\n          break;\n      }\n      if (label && infoTextState !== label) {\n        setInfoTextState(label);\n      }\n    } else {\n      if (infoTextState !== promptLabel) {\n        setInfoTextState(promptLabel);\n      }\n    }\n  };\n  var onPanelClick = function onPanelClick(event) {\n    if (props.feedback) {\n      OverlayService.emit('overlay-click', {\n        originalEvent: event,\n        target: elementRef.current\n      });\n    }\n  };\n  var onMaskToggle = function onMaskToggle() {\n    setUnmaskedState(function (prevUnmasked) {\n      return !prevUnmasked;\n    });\n  };\n  var show = function show() {\n    updateLabels();\n    setOverlayVisibleState(true);\n  };\n  var hide = function hide() {\n    setOverlayVisibleState(false);\n  };\n  var alignOverlay = function alignOverlay() {\n    if (inputRef.current) {\n      DomHandler.alignOverlay(overlayRef.current, inputRef.current.parentElement, props.appendTo || PrimeReact.appendTo);\n    }\n  };\n  var onOverlayEnter = function onOverlayEnter() {\n    ZIndexUtils.set('overlay', overlayRef.current, PrimeReact.autoZIndex, PrimeReact.zIndex['overlay']);\n    alignOverlay();\n  };\n  var onOverlayEntered = function onOverlayEntered() {\n    bindOverlayListener();\n    props.onShow && props.onShow();\n  };\n  var onOverlayExit = function onOverlayExit() {\n    unbindOverlayListener();\n  };\n  var onOverlayExited = function onOverlayExited() {\n    ZIndexUtils.clear(overlayRef.current);\n    props.onHide && props.onHide();\n  };\n  var onFocus = function onFocus(event) {\n    setFocusedState(true);\n    if (props.feedback) {\n      show();\n    }\n    props.onFocus && props.onFocus(event);\n  };\n  var onBlur = function onBlur(event) {\n    setFocusedState(false);\n    if (props.feedback) {\n      hide();\n    }\n    props.onBlur && props.onBlur(event);\n  };\n  var onKeyup = function onKeyup(e) {\n    var keyCode = e.keyCode || e.which;\n    if (props.feedback) {\n      var value = e.target.value;\n      var label = null;\n      var meter = null;\n      switch (testStrength(value)) {\n        case 1:\n          label = weakLabel;\n          meter = {\n            strength: 'weak',\n            width: '33.33%'\n          };\n          break;\n        case 2:\n          label = mediumLabel;\n          meter = {\n            strength: 'medium',\n            width: '66.66%'\n          };\n          break;\n        case 3:\n          label = strongLabel;\n          meter = {\n            strength: 'strong',\n            width: '100%'\n          };\n          break;\n        default:\n          label = promptLabel;\n          meter = null;\n          break;\n      }\n      setMeterState(meter);\n      setInfoTextState(label);\n      if (!!keyCode && !overlayVisibleState) {\n        show();\n      }\n    }\n    props.onKeyUp && props.onKeyUp(e);\n  };\n  var onInput = function onInput(event, validatePattern) {\n    if (props.onInput) {\n      props.onInput(event, validatePattern);\n    }\n    if (!props.onChange) {\n      ObjectUtils.isNotEmpty(event.target.value) ? DomHandler.addClass(elementRef.current, 'p-inputwrapper-filled') : DomHandler.removeClass(elementRef.current, 'p-inputwrapper-filled');\n    }\n  };\n  var testStrength = function testStrength(str) {\n    if (strongCheckRegExp.current.test(str)) return 3;else if (mediumCheckRegExp.current.test(str)) return 2;else if (str.length) return 1;\n    return 0;\n  };\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      focus: function focus() {\n        return DomHandler.focus(inputRef.current);\n      },\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getOverlay: function getOverlay() {\n        return overlayRef.current;\n      },\n      getInput: function getInput() {\n        return inputRef.current;\n      }\n    };\n  });\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(inputRef, props.inputRef);\n  }, [inputRef, props.inputRef]);\n  React.useEffect(function () {\n    mediumCheckRegExp.current = new RegExp(props.mediumRegex);\n  }, [props.mediumRegex]);\n  React.useEffect(function () {\n    strongCheckRegExp.current = new RegExp(props.strongRegex);\n  }, [props.strongRegex]);\n  React.useEffect(function () {\n    if (!isFilled && DomHandler.hasClass(elementRef.current, 'p-inputwrapper-filled')) {\n      DomHandler.removeClass(elementRef.current, 'p-inputwrapper-filled');\n    }\n  }, [isFilled]);\n  useUnmountEffect(function () {\n    ZIndexUtils.clear(overlayRef.current);\n  });\n  var createIcon = function createIcon() {\n    if (props.toggleMask) {\n      var iconClassName = unmaskedState ? 'pi pi-eye-slash' : 'pi pi-eye';\n      var content = /*#__PURE__*/React.createElement(\"i\", {\n        className: iconClassName,\n        onClick: onMaskToggle\n      });\n      if (props.icon) {\n        var defaultIconOptions = {\n          onClick: onMaskToggle,\n          className: iconClassName,\n          element: content,\n          props: props\n        };\n        content = ObjectUtils.getJSXElement(props.icon, defaultIconOptions);\n      }\n      return content;\n    }\n    return null;\n  };\n  var createPanel = function createPanel() {\n    var panelClassName = classNames('p-password-panel p-component', props.panelClassName, {\n      'p-input-filled': PrimeReact.inputStyle === 'filled',\n      'p-ripple-disabled': PrimeReact.ripple === false\n    });\n    var _ref2 = meterState || {\n        strength: '',\n        width: '0%'\n      },\n      strength = _ref2.strength,\n      width = _ref2.width;\n    var header = ObjectUtils.getJSXElement(props.header, props);\n    var footer = ObjectUtils.getJSXElement(props.footer, props);\n    var content = props.content ? ObjectUtils.getJSXElement(props.content, props) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-password-meter\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-password-strength \".concat(strength),\n      style: {\n        width: width\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-password-info \".concat(strength)\n    }, infoTextState));\n    var panel = /*#__PURE__*/React.createElement(CSSTransition, {\n      nodeRef: overlayRef,\n      classNames: \"p-connected-overlay\",\n      \"in\": overlayVisibleState,\n      timeout: {\n        enter: 120,\n        exit: 100\n      },\n      options: props.transitionOptions,\n      unmountOnExit: true,\n      onEnter: onOverlayEnter,\n      onEntered: onOverlayEntered,\n      onExit: onOverlayExit,\n      onExited: onOverlayExited\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: overlayRef,\n      className: panelClassName,\n      style: props.panelStyle,\n      onClick: onPanelClick\n    }, header, content, footer));\n    return /*#__PURE__*/React.createElement(Portal, {\n      element: panel,\n      appendTo: props.appendTo\n    });\n  };\n  var className = classNames('p-password p-component p-inputwrapper', {\n    'p-inputwrapper-filled': isFilled,\n    'p-inputwrapper-focus': focusedState,\n    'p-input-icon-right': props.toggleMask\n  }, props.className);\n  var inputClassName = classNames('p-password-input', props.inputClassName);\n  var inputProps = PasswordBase.getOtherProps(props);\n  var icon = createIcon();\n  var panel = createPanel();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: elementRef,\n    id: props.id,\n    className: className,\n    style: props.style\n  }, /*#__PURE__*/React.createElement(InputText, _extends({\n    ref: inputRef,\n    id: props.inputId\n  }, inputProps, {\n    type: type,\n    className: inputClassName,\n    style: props.inputStyle,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyUp: onKeyup,\n    onInput: onInput,\n    tooltip: props.tooltip,\n    tooltipOptions: props.tooltipOptions\n  })), icon, panel);\n}));\nPassword.displayName = 'Password';\nexport { Password };","map":null,"metadata":{},"sourceType":"module"}