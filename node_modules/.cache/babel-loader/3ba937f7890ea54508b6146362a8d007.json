{"ast":null,"code":"import _classCallCheck from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nfunction addHoverEvent(node, isActive) {\n  var eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n  var callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n  var handleEvent = function handleEvent(event, info) {\n    if (event.type === \"touch\" || isDragActive()) return;\n    var props = node.getProps();\n    if (node.animationState && props.whileHover) {\n      node.animationState.setActive(AnimationType.Hover, isActive);\n    }\n    if (props[callbackName]) {\n      props[callbackName](event, info);\n    }\n  };\n  return addPointerEvent(node.current, eventName, handleEvent, {\n    passive: !node.getProps()[callbackName]\n  });\n}\nvar HoverGesture = /*#__PURE__*/function (_Feature) {\n  _inherits(HoverGesture, _Feature);\n  var _super = _createSuper(HoverGesture);\n  function HoverGesture() {\n    _classCallCheck(this, HoverGesture);\n    return _super.apply(this, arguments);\n  }\n  _createClass(HoverGesture, [{\n    key: \"mount\",\n    value: function mount() {\n      this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return HoverGesture;\n}(Feature);\nexport { HoverGesture };","map":null,"metadata":{},"sourceType":"module"}