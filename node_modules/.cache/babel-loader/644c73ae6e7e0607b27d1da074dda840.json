{"ast":null,"code":"import _classCallCheck from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\nvar thresholdNames = {\n  some: 0,\n  all: 1\n};\nvar InViewFeature = /*#__PURE__*/function (_Feature) {\n  _inherits(InViewFeature, _Feature);\n  var _super = _createSuper(InViewFeature);\n  function InViewFeature() {\n    var _this;\n    _classCallCheck(this, InViewFeature);\n    _this = _super.apply(this, arguments);\n    _this.hasEnteredView = false;\n    _this.isInView = false;\n    return _this;\n  }\n  /**\n   * TODO: Remove this in 10.0\n   */\n  _createClass(InViewFeature, [{\n    key: \"viewportFallback\",\n    value: function viewportFallback() {\n      var _this2 = this;\n      /**\n       * Fire this in an rAF because, at this point, the animation state\n       * won't have flushed for the first time and there's certain logic in\n       * there that behaves differently on the initial animation.\n       */\n      requestAnimationFrame(function () {\n        _this2.hasEnteredView = true;\n        var _this2$node$getProps = _this2.node.getProps(),\n          onViewportEnter = _this2$node$getProps.onViewportEnter;\n        onViewportEnter && onViewportEnter(null);\n        if (_this2.node.animationState) {\n          _this2.node.animationState.setActive(AnimationType.InView, true);\n        }\n      });\n    }\n  }, {\n    key: \"startObserver\",\n    value: function startObserver() {\n      var _this3 = this;\n      this.unmount();\n      var _this$node$getProps = this.node.getProps(),\n        _this$node$getProps$v = _this$node$getProps.viewport,\n        viewport = _this$node$getProps$v === void 0 ? {} : _this$node$getProps$v;\n      var root = viewport.root,\n        rootMargin = viewport.margin,\n        _viewport$amount = viewport.amount,\n        amount = _viewport$amount === void 0 ? \"some\" : _viewport$amount,\n        once = viewport.once,\n        _viewport$fallback = viewport.fallback,\n        fallback = _viewport$fallback === void 0 ? true : _viewport$fallback;\n      if (typeof IntersectionObserver === \"undefined\") {\n        if (fallback) this.viewportFallback();\n        return;\n      }\n      var options = {\n        root: root ? root.current : undefined,\n        rootMargin: rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n      };\n      var onIntersectionUpdate = function onIntersectionUpdate(entry) {\n        var isIntersecting = entry.isIntersecting;\n        /**\n         * If there's been no change in the viewport state, early return.\n         */\n        if (_this3.isInView === isIntersecting) return;\n        _this3.isInView = isIntersecting;\n        /**\n         * Handle hasEnteredView. If this is only meant to run once, and\n         * element isn't visible, early return. Otherwise set hasEnteredView to true.\n         */\n        if (once && !isIntersecting && _this3.hasEnteredView) {\n          return;\n        } else if (isIntersecting) {\n          _this3.hasEnteredView = true;\n        }\n        if (_this3.node.animationState) {\n          _this3.node.animationState.setActive(AnimationType.InView, isIntersecting);\n        }\n        /**\n         * Use the latest committed props rather than the ones in scope\n         * when this observer is created\n         */\n        var _this3$node$getProps = _this3.node.getProps(),\n          onViewportEnter = _this3$node$getProps.onViewportEnter,\n          onViewportLeave = _this3$node$getProps.onViewportLeave;\n        var callback = isIntersecting ? onViewportEnter : onViewportLeave;\n        callback && callback(entry);\n      };\n      return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.startObserver();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (typeof IntersectionObserver === \"undefined\") return;\n      var _this$node = this.node,\n        props = _this$node.props,\n        prevProps = _this$node.prevProps;\n      var hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n      if (hasOptionsChanged) {\n        this.startObserver();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return InViewFeature;\n}(Feature);\nfunction hasViewportOptionChanged(_ref) {\n  var _ref$viewport = _ref.viewport,\n    viewport = _ref$viewport === void 0 ? {} : _ref$viewport;\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$viewport = _ref2.viewport,\n    prevViewport = _ref2$viewport === void 0 ? {} : _ref2$viewport;\n  return function (name) {\n    return viewport[name] !== prevViewport[name];\n  };\n}\nexport { InViewFeature };","map":null,"metadata":{},"sourceType":"module"}