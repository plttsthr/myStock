{"ast":null,"code":"import * as React from 'react';\nimport { useMountEffect, useUpdateEffect } from 'primereact/hooks';\nimport { InputText } from 'primereact/inputtext';\nimport { ObjectUtils, DomHandler, classNames } from 'primereact/utils';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar InputMaskBase = {\n  defaultProps: {\n    __TYPE: 'InputMask',\n    id: null,\n    value: null,\n    type: 'text',\n    mask: null,\n    slotChar: '_',\n    autoClear: true,\n    unmask: false,\n    style: null,\n    className: null,\n    placeholder: null,\n    size: null,\n    maxLength: null,\n    tabIndex: null,\n    disabled: false,\n    readOnly: false,\n    name: null,\n    required: false,\n    tooltip: null,\n    tooltipOptions: null,\n    onComplete: null,\n    onChange: null,\n    onFocus: null,\n    onBlur: null,\n    children: undefined\n  },\n  getProps: function getProps(props) {\n    return ObjectUtils.getMergedProps(props, InputMaskBase.defaultProps);\n  },\n  getOtherProps: function getOtherProps(props) {\n    return ObjectUtils.getDiffProps(props, InputMaskBase.defaultProps);\n  }\n};\nvar InputMask = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var props = InputMaskBase.getProps(inProps);\n  var elementRef = React.useRef(ref);\n  var firstNonMaskPos = React.useRef(null);\n  var lastRequiredNonMaskPos = React.useRef(0);\n  var tests = React.useRef([]);\n  var buffer = React.useRef([]);\n  var len = React.useRef(0);\n  var oldVal = React.useRef(null);\n  var focus = React.useRef(false);\n  var focusText = React.useRef(null);\n  var isValueChecked = React.useRef(null);\n  var partialPosition = React.useRef(null);\n  var defaultBuffer = React.useRef(null);\n  var caretTimeoutId = React.useRef(null);\n  var androidChrome = React.useRef(false);\n  var caret = function caret(first, last) {\n    var range, begin, end;\n    var inputEl = elementRef.current;\n    if (!inputEl || !inputEl.offsetParent || inputEl !== document.activeElement) {\n      return;\n    }\n    if (typeof first === 'number') {\n      begin = first;\n      end = typeof last === 'number' ? last : begin;\n      if (inputEl.setSelectionRange) {\n        inputEl.setSelectionRange(begin, end);\n      } else if (inputEl['createTextRange']) {\n        range = inputEl['createTextRange']();\n        range.collapse(true);\n        range.moveEnd('character', end);\n        range.moveStart('character', begin);\n        range.select();\n      }\n    } else {\n      if (inputEl.setSelectionRange) {\n        begin = inputEl.selectionStart;\n        end = inputEl.selectionEnd;\n      } else if (document['selection'] && document['selection'].createRange) {\n        range = document['selection'].createRange();\n        begin = 0 - range.duplicate().moveStart('character', -100000);\n        end = begin + range.text.length;\n      }\n      return {\n        begin: begin,\n        end: end\n      };\n    }\n  };\n  var isCompleted = function isCompleted() {\n    for (var i = firstNonMaskPos.current; i <= lastRequiredNonMaskPos.current; i++) {\n      if (tests.current[i] && buffer.current[i] === getPlaceholder(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var getPlaceholder = React.useCallback(function (i) {\n    if (i < props.slotChar.length) {\n      return props.slotChar.charAt(i);\n    }\n    return props.slotChar.charAt(0);\n  }, [props.slotChar]);\n  var getValue = function getValue() {\n    return props.unmask ? getUnmaskedValue() : elementRef.current && elementRef.current.value;\n  };\n  var seekNext = function seekNext(pos) {\n    while (++pos < len.current && !tests.current[pos]);\n    return pos;\n  };\n  var seekPrev = function seekPrev(pos) {\n    while (--pos >= 0 && !tests.current[pos]);\n    return pos;\n  };\n  var shiftL = function shiftL(begin, end) {\n    var i, j;\n    if (begin < 0) {\n      return;\n    }\n    for (i = begin, j = seekNext(end); i < len.current; i++) {\n      if (tests.current[i]) {\n        if (j < len.current && tests.current[i].test(buffer.current[j])) {\n          buffer.current[i] = buffer.current[j];\n          buffer.current[j] = getPlaceholder(j);\n        } else {\n          break;\n        }\n        j = seekNext(j);\n      }\n    }\n    writeBuffer();\n    caret(Math.max(firstNonMaskPos.current, begin));\n  };\n  var shiftR = function shiftR(pos) {\n    var i, c, j, t;\n    for (i = pos, c = getPlaceholder(pos); i < len.current; i++) {\n      if (tests.current[i]) {\n        j = seekNext(i);\n        t = buffer.current[i];\n        buffer.current[i] = c;\n        if (j < len.current && tests.current[j].test(t)) {\n          c = t;\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  var handleAndroidInput = function handleAndroidInput(e) {\n    var curVal = elementRef.current.value;\n    var pos = caret();\n    if (oldVal.current.length && oldVal.current.length > curVal.length) {\n      // a deletion or backspace happened\n      checkVal(true);\n      while (pos.begin > 0 && !tests.current[pos.begin - 1]) pos.begin--;\n      if (pos.begin === 0) {\n        while (pos.begin < firstNonMaskPos.current && !tests.current[pos.begin]) pos.begin++;\n      }\n      caret(pos.begin, pos.begin);\n    } else {\n      checkVal(true);\n      while (pos.begin < len.current && !tests.current[pos.begin]) pos.begin++;\n      caret(pos.begin, pos.begin);\n    }\n    if (props.onComplete && isCompleted()) {\n      props.onComplete({\n        originalEvent: e,\n        value: getValue()\n      });\n    }\n    updateModel(e);\n  };\n  var onBlur = function onBlur(e) {\n    focus.current = false;\n    checkVal();\n    updateModel(e);\n    updateFilledState();\n    props.onBlur && props.onBlur(e);\n    if (elementRef.current.value !== focusText.current) {\n      var event = document.createEvent('HTMLEvents');\n      event.initEvent('change', true, false);\n      elementRef.current.dispatchEvent(event);\n    }\n  };\n  var onKeyDown = function onKeyDown(e) {\n    if (props.readOnly) {\n      return;\n    }\n    var k = e.which || e.keyCode,\n      pos,\n      begin,\n      end;\n    oldVal.current = elementRef.current.value;\n\n    //backspace, delete, and escape get special treatment\n    if (k === 8 || k === 46 || DomHandler.isIOS() && k === 127) {\n      pos = caret();\n      begin = pos.begin;\n      end = pos.end;\n      if (end - begin === 0) {\n        begin = k !== 46 ? seekPrev(begin) : end = seekNext(begin - 1);\n        end = k === 46 ? seekNext(end) : end;\n      }\n      clearBuffer(begin, end);\n      shiftL(begin, end - 1);\n      updateModel(e);\n      e.preventDefault();\n    } else if (k === 13) {\n      // enter\n      onBlur(e);\n      updateModel(e);\n    } else if (k === 27) {\n      // escape\n      elementRef.current.value = focusText.current;\n      caret(0, checkVal());\n      updateModel(e);\n      e.preventDefault();\n    }\n  };\n  var onKeyPress = function onKeyPress(e) {\n    if (props.readOnly) {\n      return;\n    }\n    var k = e.which || e.keyCode,\n      pos = caret(),\n      p,\n      c,\n      next,\n      completed;\n    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {\n      //Ignore\n      return;\n    } else if (k && k !== 13) {\n      if (pos.end - pos.begin !== 0) {\n        clearBuffer(pos.begin, pos.end);\n        shiftL(pos.begin, pos.end - 1);\n      }\n      p = seekNext(pos.begin - 1);\n      if (p < len.current) {\n        c = String.fromCharCode(k);\n        if (tests.current[p].test(c)) {\n          shiftR(p);\n          buffer.current[p] = c;\n          writeBuffer();\n          next = seekNext(p);\n          if (DomHandler.isAndroid()) {\n            //Path for CSP Violation on FireFox OS 1.1\n            var proxy = function proxy() {\n              caret(next);\n            };\n            setTimeout(proxy, 0);\n          } else {\n            caret(next);\n          }\n          if (pos.begin <= lastRequiredNonMaskPos.current) {\n            completed = isCompleted();\n          }\n        }\n      }\n      e.preventDefault();\n    }\n    updateModel(e);\n    if (props.onComplete && completed) {\n      props.onComplete({\n        originalEvent: e,\n        value: getValue()\n      });\n    }\n  };\n  var clearBuffer = function clearBuffer(start, end) {\n    var i;\n    for (i = start; i < end && i < len.current; i++) {\n      if (tests.current[i]) {\n        buffer.current[i] = getPlaceholder(i);\n      }\n    }\n  };\n  var writeBuffer = function writeBuffer() {\n    elementRef.current.value = buffer.current.join('');\n  };\n  var checkVal = function checkVal(allow) {\n    isValueChecked.current = true;\n    //try to place characters where they belong\n    var test = elementRef.current.value,\n      lastMatch = -1,\n      i,\n      c,\n      pos;\n    for (i = 0, pos = 0; i < len.current; i++) {\n      if (tests.current[i]) {\n        buffer.current[i] = getPlaceholder(i);\n        while (pos++ < test.length) {\n          c = test.charAt(pos - 1);\n          if (tests.current[i].test(c)) {\n            buffer.current[i] = c;\n            lastMatch = i;\n            break;\n          }\n        }\n        if (pos > test.length) {\n          clearBuffer(i + 1, len.current);\n          break;\n        }\n      } else {\n        if (buffer.current[i] === test.charAt(pos)) {\n          pos++;\n        }\n        if (i < partialPosition.current) {\n          lastMatch = i;\n        }\n      }\n    }\n    if (allow) {\n      writeBuffer();\n    } else if (lastMatch + 1 < partialPosition.current) {\n      if (props.autoClear || buffer.current.join('') === defaultBuffer.current) {\n        // Invalid value. Remove it and replace it with the\n        // mask, which is the default behavior.\n        if (elementRef.current.value) elementRef.current.value = '';\n        clearBuffer(0, len.current);\n      } else {\n        // Invalid value, but we opt to show the value to the\n        // user and allow them to correct their mistake.\n        writeBuffer();\n      }\n    } else {\n      writeBuffer();\n      elementRef.current.value = elementRef.current.value.substring(0, lastMatch + 1);\n    }\n    return partialPosition.current ? i : firstNonMaskPos.current;\n  };\n  var onFocus = function onFocus(e) {\n    if (props.readOnly) {\n      return;\n    }\n    focus.current = true;\n    clearTimeout(caretTimeoutId.current);\n    var pos;\n    focusText.current = elementRef.current.value;\n    pos = checkVal();\n    caretTimeoutId.current = setTimeout(function () {\n      if (elementRef.current !== document.activeElement) {\n        return;\n      }\n      writeBuffer();\n      if (pos === props.mask.replace('?', '').length) {\n        caret(0, pos);\n      } else {\n        caret(pos);\n      }\n      updateFilledState();\n    }, 10);\n    props.onFocus && props.onFocus(e);\n  };\n  var onInput = function onInput(event) {\n    androidChrome.current ? handleAndroidInput(event) : handleInputChange(event);\n  };\n  var handleInputChange = function handleInputChange(e) {\n    if (props.readOnly) {\n      return;\n    }\n    var pos = checkVal(true);\n    caret(pos);\n    updateModel(e);\n    if (props.onComplete && isCompleted()) {\n      props.onComplete({\n        originalEvent: e,\n        value: getValue()\n      });\n    }\n  };\n  var getUnmaskedValue = React.useCallback(function () {\n    var unmaskedBuffer = [];\n    for (var i = 0; i < buffer.current.length; i++) {\n      var c = buffer.current[i];\n      if (tests.current[i] && c !== getPlaceholder(i)) {\n        unmaskedBuffer.push(c);\n      }\n    }\n    return unmaskedBuffer.join('');\n  }, [getPlaceholder]);\n  var updateModel = function updateModel(e) {\n    if (props.onChange) {\n      var val = props.unmask ? getUnmaskedValue() : e && e.target.value;\n      props.onChange({\n        originalEvent: e,\n        value: defaultBuffer.current !== val ? val : '',\n        stopPropagation: function stopPropagation() {},\n        preventDefault: function preventDefault() {},\n        target: {\n          name: props.name,\n          id: props.id,\n          value: defaultBuffer.current !== val ? val : ''\n        }\n      });\n    }\n  };\n  var updateFilledState = function updateFilledState() {\n    if (elementRef.current && elementRef.current.value && elementRef.current.value.length > 0) DomHandler.addClass(elementRef.current, 'p-filled');else DomHandler.removeClass(elementRef.current, 'p-filled');\n  };\n  var updateValue = function updateValue(allow) {\n    var pos;\n    if (elementRef.current) {\n      if (props.value == null) {\n        elementRef.current.value = '';\n      } else {\n        elementRef.current.value = props.value;\n        pos = checkVal(allow);\n        setTimeout(function () {\n          if (elementRef.current) {\n            writeBuffer();\n            return checkVal(allow);\n          }\n        }, 10);\n      }\n      focusText.current = elementRef.current.value;\n    }\n    updateFilledState();\n    return pos;\n  };\n  var isValueUpdated = React.useCallback(function () {\n    return props.unmask ? props.value !== getUnmaskedValue() : defaultBuffer.current !== elementRef.current.value && elementRef.current.value !== props.value;\n  }, [props.unmask, props.value, getUnmaskedValue]);\n  var init = function init() {\n    if (props.mask) {\n      tests.current = [];\n      partialPosition.current = props.mask.length;\n      len.current = props.mask.length;\n      firstNonMaskPos.current = null;\n      var defs = {\n        9: '[0-9]',\n        a: '[A-Za-z]',\n        '*': '[A-Za-z0-9]'\n      };\n      androidChrome.current = DomHandler.isChrome() && DomHandler.isAndroid();\n      var maskTokens = props.mask.split('');\n      for (var i = 0; i < maskTokens.length; i++) {\n        var c = maskTokens[i];\n        if (c === '?') {\n          len.current--;\n          partialPosition.current = i;\n        } else if (defs[c]) {\n          tests.current.push(new RegExp(defs[c]));\n          if (firstNonMaskPos.current === null) {\n            firstNonMaskPos.current = tests.current.length - 1;\n          }\n          if (i < partialPosition.current) {\n            lastRequiredNonMaskPos.current = tests.current.length - 1;\n          }\n        } else {\n          tests.current.push(null);\n        }\n      }\n      buffer.current = [];\n      for (var _i = 0; _i < maskTokens.length; _i++) {\n        var _c = maskTokens[_i];\n        if (_c !== '?') {\n          if (defs[_c]) buffer.current.push(getPlaceholder(_i));else buffer.current.push(_c);\n        }\n      }\n      defaultBuffer.current = buffer.current.join('');\n    }\n  };\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      focus: function focus() {\n        return DomHandler.focus(elementRef.current);\n      },\n      getElement: function getElement() {\n        return elementRef.current;\n      }\n    };\n  });\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(elementRef, ref);\n  }, [elementRef, ref]);\n  useMountEffect(function () {\n    init();\n    updateValue();\n  });\n  useUpdateEffect(function () {\n    init();\n    caret(updateValue(true));\n    if (props.unmask) {\n      updateModel();\n    }\n  }, [props.mask]);\n  useUpdateEffect(function () {\n    if (isValueUpdated()) {\n      updateValue();\n    }\n  }, [isValueUpdated]);\n  var otherProps = InputMaskBase.getOtherProps(props);\n  var className = classNames('p-inputmask', props.className);\n  return /*#__PURE__*/React.createElement(InputText, _extends({\n    ref: elementRef,\n    id: props.id,\n    type: props.type,\n    name: props.name,\n    style: props.style,\n    className: className\n  }, otherProps, {\n    placeholder: props.placeholder,\n    size: props.size,\n    maxLength: props.maxLength,\n    tabIndex: props.tabIndex,\n    disabled: props.disabled,\n    readOnly: props.readOnly,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyPress: onKeyPress,\n    onInput: onInput,\n    onPaste: handleInputChange,\n    required: props.required,\n    tooltip: props.tooltip,\n    tooltipOptions: props.tooltipOptions\n  }));\n}));\nInputMask.displayName = 'InputMask';\nexport { InputMask };","map":null,"metadata":{},"sourceType":"module"}