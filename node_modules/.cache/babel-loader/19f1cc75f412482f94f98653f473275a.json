{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es.string.trim.js\");\nrequire(\"core-js/modules/es.regexp.exec.js\");\nrequire(\"core-js/modules/es.string.split.js\");\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\nrequire(\"core-js/modules/es.parse-int.js\");\nvar _handleBackspace = _interopRequireDefault(require(\"./_lib/handleBackspace\"));\nvar _isSeparator = _interopRequireDefault(require(\"./_lib/isSeparator\"));\nvar _removeSeparators = _interopRequireDefault(require(\"./filters/removeSeparators\"));\nvar _removeLetters = _interopRequireDefault(require(\"./filters/removeLetters\"));\nvar _removeNumbers = _interopRequireDefault(require(\"./filters/removeNumbers\"));\nvar _setDefaultOption = _interopRequireDefault(require(\"./_lib/setDefaultOption\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar formatString = function formatString(newInput) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0, _setDefaultOption.default)(options, 'lettersAsSeparators', false);\n  (0, _setDefaultOption.default)(options, 'numbersOnly', false);\n  (0, _setDefaultOption.default)(options, 'lettersOnly', false);\n  (0, _setDefaultOption.default)(options, 'allCaps', false); // Check for conflicting parameters\n\n  checkParameters(options);\n  var lettersAsSeparators = options.lettersAsSeparators,\n    backspaceAt = options.backspaceAt,\n    deleteAt = options.deleteAt,\n    customFormatter = options.customFormatter,\n    numbersOnly = options.numbersOnly,\n    lettersOnly = options.lettersOnly,\n    allCaps = options.allCaps; // Handle backspace/delete if necessary\n\n  if (typeof backspaceAt === 'number') {\n    newInput = (0, _handleBackspace.default)(newInput, backspaceAt);\n  } else if (typeof deleteAt === 'number') {\n    newInput = (0, _handleBackspace.default)(newInput, deleteAt, true);\n  }\n  if (numbersOnly) newInput = (0, _removeLetters.default)(newInput);\n  if (lettersOnly) newInput = (0, _removeNumbers.default)(newInput);\n  if (allCaps) newInput = newInput.toUpperCase(); // Clean up input and re-start process\n\n  var rawValue = (0, _removeSeparators.default)(newInput, lettersAsSeparators);\n  if (rawValue.length === 0) return ''; // Use custom formatter callback if provided\n\n  if (typeof customFormatter === 'function') return customFormatter(rawValue); // Clean up format and initialize separator map\n\n  var formatCleaned = format.trim();\n  var formatLength = formatCleaned.length;\n  var separatorMap = buildSeparatorsMap(format, lettersAsSeparators);\n  var numSeparators = Object.keys(separatorMap).length; // Check for faulty format\n\n  var invalidFormat = checkFormat(formatLength, numSeparators);\n  if (invalidFormat) return rawValue; // Trim raw string if it exceeds its max length\n\n  var maxInputLength = formatLength - numSeparators;\n  if (rawValue.length > maxInputLength) {\n    rawValue = rawValue.substring(0, maxInputLength);\n  } // Convert rawValue into an array\n\n  var inputArray = rawValue.split('');\n  for (var _i = 0, _Object$entries = Object.entries(separatorMap); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      idxString = _Object$entries$_i[0],\n      separator = _Object$entries$_i[1];\n    var index = parseInt(idxString); // Break loop if index exceeds input length\n\n    if (index > inputArray.length) break; // Insert separator at index\n\n    inputArray.splice(index, 0, separator);\n  }\n  return inputArray.join('');\n};\nvar _default = formatString; // ********************************************************************\n// HELPER FUNCTIONS\n\n/**\n * Check for any conflicting option parameters.\n * \n * @param {object} options - The options object for formatString\n */\n\nexports.default = _default;\nvar checkParameters = function checkParameters(options) {\n  if (options.numbersOnly && options.lettersOnly) {\n    throw new Error('One of numbersOnly or lettersOnly must be false.');\n  }\n  if (options.lettersOnly && options.lettersAsSeparators) {\n    throw new Error(\"lettersOnly and lettersAsSeparators can't both be true.\");\n  }\n};\n/**\n * Check for faulty format.\n * \n * @param {number} formatLength - The length of the format string\n * @param {number} numSeparators - The number of separators in the format string\n * @returns {boolean}\n */\n\nvar checkFormat = function checkFormat(formatLength, numSeparators) {\n  var hasErrors = false; // Print error if format is non-empty\n\n  if (formatLength < 1) {\n    console.error('String format must be at least one character long.');\n    hasErrors = true;\n  } // Print error if entire format string is composed of errors\n\n  if (numSeparators === formatLength && numSeparators > 0) {\n    console.error('Formatted string cannot consist of only separators.');\n    hasErrors = true;\n  }\n  return hasErrors;\n};\n/**\n * Determine indices of the format's separator(s).\n * \n * @param {string} format - The string's format\n * @param {boolean} lettersAsSeparators - Whether letters are to be considered as separators\n * @returns {object}\n */\n\nvar buildSeparatorsMap = function buildSeparatorsMap(format) {\n  var lettersAsSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var separatorMap = {};\n  for (var i = 0; i < format.length; i++) {\n    var char = format[i];\n    if (!(0, _isSeparator.default)(char, lettersAsSeparators)) continue;\n    separatorMap[i] = char;\n  }\n  return separatorMap;\n};","map":null,"metadata":{},"sourceType":"script"}