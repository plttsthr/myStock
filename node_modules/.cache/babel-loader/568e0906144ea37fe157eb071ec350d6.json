{"ast":null,"code":"import _asyncToGenerator from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport swal from 'sweetalert';\nimport { createUserWithEmailAndPassword, sendEmailVerification, onAuthStateChanged, signOut, sendPasswordResetEmail, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { auth, storage, db } from \"../Model/firebase\";\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { setDoc, doc, updateDoc, deleteDoc, arrayRemove } from 'firebase/firestore';\nimport { collection, addDoc, getDoc, getDocs } from 'firebase/firestore';\n\n// Cambios por hacer: quitar los swal del controller y ponerlos en el view\nvar Controller = /*#__PURE__*/function () {\n  function Controller(auth) {\n    var _this = this;\n    _classCallCheck(this, Controller);\n    this.auth = auth;\n    this.authUser = null;\n    onAuthStateChanged(auth, function (user) {\n      if (user) {\n        console.log(user);\n        _this.authUser = user;\n      } else {\n        console.log(\"user null\");\n        _this.authUser = null;\n      }\n    });\n  }\n\n  // sends verification email to the user\n  _createClass(Controller, [{\n    key: \"verifyEmail\",\n    value: function verifyEmail() {\n      sendEmailVerification(this.authUser).then(function () {\n        swal(\"Email Verification Sent\", \"Check your email and click the link we sent to continue.\", \"success\");\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Cannot read properties of null (reading 'getIdToken')\":\n            swal(\"User already exists\", \"Use another email\", \"error\");\n            break;\n          default:\n            // When this happen we should put an extra button to send the verification again!!!!\n            swal(\"Could not send verification email\", \"Try sending it again.\", \"error\");\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"passValidation\",\n    value:\n    // password security checks\n    function passValidation(p1, p2) {\n      if (p1 !== p2) {\n        // Check the 2 password boxes\n        swal(\"Error\", \"Passwords did not match. Try Again\", \"error\");\n        return false;\n      }\n      var regx = /^(?=.*[!@#?])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?!.*\\s).{8,16}$/;\n      if (p1.match(regx)) {\n        // contains all required characters\n        return true;\n      } else {\n        // Does not contain all characters\n        swal(\"Error\", \"Password does not meet the requirements. Try Again\", \"error\");\n        return false;\n      }\n    }\n  }, {\n    key: \"emailVerifyProcedure\",\n    value:\n    // Creates user in the authentication service with the email and password chosen\n    // after creation, user is sent verification email\n    function emailVerifyProcedure(email, password, confirmPassword) {\n      var _this2 = this;\n      if (this.passValidation(password, confirmPassword)) {\n        createUserWithEmailAndPassword(this.auth, email, password).then(function (userCredential) {\n          // User was added to authentication service with email and password\n          console.log(_this2.authUser);\n          _this2.verifyEmail();\n        }).catch(function (error) {\n          //console.log(error.message);\n          if (error.message === \"Firebase: Error (auth/email-already-in-use).\") {\n            // work later on sending more verification email if necessary\n            console.log(\"sending verification again\");\n            _this2.verifyEmail();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"checkCurrentUserStatus\",\n    value: // Helper function to check a user's status\n    function () {\n      var _checkCurrentUserStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this3 = this;\n        var uid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return new Promise(function (resolve) {\n                var checkUser = setInterval(function () {\n                  if (_this3.auth.currentUser != null) {\n                    clearInterval(checkUser);\n                    resolve();\n                  }\n                  // Check every 100 miliseconds\n                }, 100);\n              });\n            case 2:\n              // Destructing uid from auth.currentUser object (extract field from object)\n              uid = this.auth.currentUser.uid;\n              return _context.abrupt(\"return\", uid);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function checkCurrentUserStatus() {\n        return _checkCurrentUserStatus.apply(this, arguments);\n      }\n      return checkCurrentUserStatus;\n    }() // Grab users information from Firestore \n  }, {\n    key: \"grab_user_info\",\n    value: function () {\n      var _grab_user_info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(grab_items) {\n        var uid, docRef, docSnap, i;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.checkCurrentUserStatus();\n            case 2:\n              uid = _context2.sent;\n              docRef = doc(db, 'users', uid);\n              _context2.next = 6;\n              return getDoc(docRef);\n            case 6:\n              docSnap = _context2.sent;\n              // Grab that item from the userID object\n              for (i = 0; i < grab_items.length; i++) {\n                // Check for user_item in array\n                grab_items[i] = docSnap.data()[grab_items[i]];\n              }\n              return _context2.abrupt(\"return\", grab_items);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function grab_user_info(_x) {\n        return _grab_user_info.apply(this, arguments);\n      }\n      return grab_user_info;\n    }() // Grab users image from Storage \n  }, {\n    key: \"grab_user_picture\",\n    value: function () {\n      var _grab_user_picture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(pictureType) {\n        var uid, image, reference;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.checkCurrentUserStatus();\n            case 2:\n              uid = _context3.sent;\n              image = 'users/' + uid + '/pictures/' + pictureType + '.jpg';\n              reference = ref(storage, image); // Create URL from reference\n              _context3.next = 7;\n              return getDownloadURL(reference).then(function (url) {\n                pictureType = url;\n              });\n            case 7:\n              return _context3.abrupt(\"return\", pictureType);\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function grab_user_picture(_x2) {\n        return _grab_user_picture.apply(this, arguments);\n      }\n      return grab_user_picture;\n    }() // Checks if the state of the user's email verification status is set to true\n  }, {\n    key: \"checkEmailVerification\",\n    value: function () {\n      var _checkEmailVerification = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.authUser.reload();\n            case 2:\n              if (!this.authUser.emailVerified) {\n                _context4.next = 7;\n                break;\n              }\n              swal(\"Email verification succesful\", \"Now you can continue to signup.\", \"success\");\n              return _context4.abrupt(\"return\", true);\n            case 7:\n              swal(\"Verify your email\", \"Once it is verified you will be allowed to continue.\", \"warning\");\n              return _context4.abrupt(\"return\", false);\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function checkEmailVerification() {\n        return _checkEmailVerification.apply(this, arguments);\n      }\n      return checkEmailVerification;\n    }()\n  }, {\n    key: \"emailVerifyNext\",\n    value: function () {\n      var _emailVerifyNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = this.authUser;\n              if (!_context5.t0) {\n                _context5.next = 5;\n                break;\n              }\n              _context5.next = 4;\n              return this.checkEmailVerification();\n            case 4:\n              _context5.t0 = _context5.sent;\n            case 5:\n              if (!_context5.t0) {\n                _context5.next = 9;\n                break;\n              }\n              return _context5.abrupt(\"return\", true);\n            case 9:\n              swal(\"Email not verified\", \"You must verify your email to proceed\", \"warning\");\n              return _context5.abrupt(\"return\", false);\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function emailVerifyNext() {\n        return _emailVerifyNext.apply(this, arguments);\n      }\n      return emailVerifyNext;\n    }()\n  }, {\n    key: \"sendPassReset\",\n    value: function sendPassReset(email) {\n      sendPasswordResetEmail(this.auth, email).then(function () {\n        swal(\"Check your Inbox\", \"Password reset link sent to email!\", \"success\");\n        return true;\n      }).catch(function (error) {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        swal(\"Ohh noo\", \"Error sending password reset link.\", \"error\");\n        return false;\n      });\n    }\n  }, {\n    key: \"loginUser\",\n    value: function () {\n      var _loginUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(email, password) {\n        var userCredential;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return signInWithEmailAndPassword(this.auth, email, password);\n            case 3:\n              userCredential = _context6.sent;\n              return _context6.abrupt(\"return\", true);\n            case 7:\n              _context6.prev = 7;\n              _context6.t0 = _context6[\"catch\"](0);\n              return _context6.abrupt(\"return\", false);\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n      function loginUser(_x3, _x4) {\n        return _loginUser.apply(this, arguments);\n      }\n      return loginUser;\n    }()\n  }, {\n    key: \"userSignOut\",\n    value: function userSignOut() {\n      signOut(this.auth).then(function () {\n        console.log(\"Signed out succesfully.\");\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n\n    // puts profile specified picture into storage\n  }, {\n    key: \"uploadImage\",\n    value: function () {\n      var _uploadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(namePicture, handletoPicture) {\n        var imageRef;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              // Grab a reference to the location where we want to upload the image\n              imageRef = ref(storage, 'users/' + this.authUser.uid + '/pictures/' + namePicture + '.jpg'); // Function uploadBytes returns a promise\n              _context7.next = 3;\n              return uploadBytes(imageRef, handletoPicture);\n            case 3:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function uploadImage(_x5, _x6) {\n        return _uploadImage.apply(this, arguments);\n      }\n      return uploadImage;\n    }()\n  }, {\n    key: \"submitData\",\n    value: function () {\n      var _submitData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(path, payload) {\n        var docReference;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              // Grab a reference to the \"users collection\", with new field called \"unknown\"\n              docReference = doc(db, path, this.authUser.uid); // Set new data into database\n              _context8.next = 3;\n              return setDoc(docReference, payload);\n            case 3:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function submitData(_x7, _x8) {\n        return _submitData.apply(this, arguments);\n      }\n      return submitData;\n    }()\n  }, {\n    key: \"submitDataRandId\",\n    value: function () {\n      var _submitDataRandId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(path, payload) {\n        var col;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              col = collection(db, path);\n              _context9.next = 3;\n              return addDoc(col, payload);\n            case 3:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      }));\n      function submitDataRandId(_x9, _x10) {\n        return _submitDataRandId.apply(this, arguments);\n      }\n      return submitDataRandId;\n    }()\n  }, {\n    key: \"updateField\",\n    value: function () {\n      var _updateField = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(path, payload) {\n        var docRef;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              docRef = doc(db, path);\n              _context10.next = 3;\n              return updateDoc(docRef, payload);\n            case 3:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }));\n      function updateField(_x11, _x12) {\n        return _updateField.apply(this, arguments);\n      }\n      return updateField;\n    }()\n  }, {\n    key: \"deleteAccount\",\n    value: function () {\n      var _deleteAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(account) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.submitDataRandId(\"accountRequests\", {\n                action: \"delete\",\n                account: account,\n                userId: this.authUser.uid\n              });\n            case 2:\n              return _context11.abrupt(\"return\", _context11.sent);\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function deleteAccount(_x13) {\n        return _deleteAccount.apply(this, arguments);\n      }\n      return deleteAccount;\n    }()\n  }, {\n    key: \"deleteProfile\",\n    value: function () {\n      var _deleteProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var userRef;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              userRef = doc(db, \"users/\".concat(this.authUser.uid));\n              _context12.next = 3;\n              return deleteDoc(userRef);\n            case 3:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function deleteProfile() {\n        return _deleteProfile.apply(this, arguments);\n      }\n      return deleteProfile;\n    }()\n  }, {\n    key: \"addAccount\",\n    value: function () {\n      var _addAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(currency) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.submitDataRandId(\"accountRequests\", {\n                action: \"create\",\n                currency: currency,\n                userId: this.authUser.uid\n              });\n            case 2:\n              return _context13.abrupt(\"return\", _context13.sent);\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function addAccount(_x14) {\n        return _addAccount.apply(this, arguments);\n      }\n      return addAccount;\n    }()\n  }, {\n    key: \"fundAccount\",\n    value: function () {\n      var _fundAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(account, amount) {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.submitDataRandId(\"accountRequests\", {\n                action: \"fund\",\n                account: account,\n                amount: Number(amount),\n                userId: this.authUser.uid\n              });\n            case 2:\n              return _context14.abrupt(\"return\", _context14.sent);\n            case 3:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function fundAccount(_x15, _x16) {\n        return _fundAccount.apply(this, arguments);\n      }\n      return fundAccount;\n    }()\n  }, {\n    key: \"transferAccounts\",\n    value: function () {\n      var _transferAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(fromAcc, toAcc, amount) {\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.submitDataRandId(\"accountRequests\", {\n                action: \"transfer\",\n                srcAcc: fromAcc,\n                destAcc: toAcc,\n                amount: Number(amount)\n              });\n            case 2:\n              return _context15.abrupt(\"return\", _context15.sent);\n            case 3:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function transferAccounts(_x17, _x18, _x19) {\n        return _transferAccounts.apply(this, arguments);\n      }\n      return transferAccounts;\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(msnumber) {\n        var uid, docRef, docSnap;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.checkCurrentUserStatus();\n            case 2:\n              uid = _context16.sent;\n              docRef = doc(db, 'accounts', msnumber);\n              _context16.next = 6;\n              return getDoc(docRef);\n            case 6:\n              docSnap = _context16.sent;\n              console.log(\"Account Data:\", docSnap.data());\n\n              // returns an array containing [currency, funds]\n              return _context16.abrupt(\"return\", [docSnap.data().currency, docSnap.data().funds]);\n            case 9:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function getBalance(_x20) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }() // adds all member information and pictures into the database.\n  }, {\n    key: \"addMember\",\n    value: function () {\n      var _addMember = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(imagePath, idFilePath, path, payload) {\n        var sts;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              sts = true;\n              _context17.next = 3;\n              return this.submitData(path, payload).catch(function () {\n                sts = false;\n              });\n            case 3:\n              _context17.next = 5;\n              return this.uploadImage(\"profilePicture\", imagePath).catch(function () {\n                sts = false;\n              });\n            case 5:\n              _context17.next = 7;\n              return this.uploadImage(\"IDpicture\", idFilePath).catch(function () {\n                sts = false;\n              });\n            case 7:\n              // now it is done through a firebase cloud function in the backend\n              //await this.sendEmail(this.authUser.email, \"Welcome to my Stock App\", \"We hope you enjoy our service!\");\n              // sign out user's session\n              this.userSignOut();\n\n              // could be more subtle in the future and return the type of error to the view\n              return _context17.abrupt(\"return\", sts);\n            case 9:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function addMember(_x21, _x22, _x23, _x24) {\n        return _addMember.apply(this, arguments);\n      }\n      return addMember;\n    }()\n  }, {\n    key: \"getStocksInfo\",\n    value: function () {\n      var _getStocksInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var querySnapshot, stocks;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return getDocs(collection(db, \"stocks\"));\n            case 2:\n              querySnapshot = _context18.sent;\n              this.info = [];\n              stocks = this;\n              querySnapshot.forEach(function (doc) {\n                stocks.info.push(JSON.parse(doc.data()));\n              });\n              console.log(stocks.info);\n              return _context18.abrupt(\"return\", stocks.info);\n            case 8:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function getStocksInfo() {\n        return _getStocksInfo.apply(this, arguments);\n      }\n      return getStocksInfo;\n    }() // Get Image out of a specific path\n  }, {\n    key: \"getImage\",\n    value: function () {\n      var _getImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(path) {\n        var uid, image, reference, pic;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.checkCurrentUserStatus();\n            case 2:\n              uid = _context19.sent;\n              image = path;\n              reference = ref(storage, image);\n              this.url = null;\n              pic = this; // Create URL from reference\n              _context19.next = 9;\n              return getDownloadURL(reference).then(function (url) {\n                pic.url = url;\n              });\n            case 9:\n              return _context19.abrupt(\"return\", pic.url);\n            case 10:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }));\n      function getImage(_x25) {\n        return _getImage.apply(this, arguments);\n      }\n      return getImage;\n    }()\n  }]);\n  return Controller;\n}();\nexport default Controller;","map":{"version":3,"names":["swal","createUserWithEmailAndPassword","sendEmailVerification","onAuthStateChanged","signOut","sendPasswordResetEmail","signInWithEmailAndPassword","auth","storage","db","ref","uploadBytes","getDownloadURL","setDoc","doc","updateDoc","deleteDoc","arrayRemove","collection","addDoc","getDoc","getDocs","Controller","authUser","user","console","log","then","catch","error","message","p1","p2","regx","match","email","password","confirmPassword","passValidation","userCredential","verifyEmail","Promise","resolve","checkUser","setInterval","currentUser","clearInterval","uid","grab_items","checkCurrentUserStatus","docRef","docSnap","i","length","data","pictureType","image","reference","url","reload","emailVerified","checkEmailVerification","errorCode","code","errorMessage","namePicture","handletoPicture","imageRef","path","payload","docReference","col","account","submitDataRandId","action","userId","userRef","currency","amount","Number","fromAcc","toAcc","srcAcc","destAcc","msnumber","funds","imagePath","idFilePath","sts","submitData","uploadImage","userSignOut","querySnapshot","info","stocks","forEach","push","JSON","parse","pic"],"sources":["/Users/paulette./Documents/GitHub/MyStockApp/src/Controller/Controller.js"],"sourcesContent":["import swal from 'sweetalert';\nimport { createUserWithEmailAndPassword, sendEmailVerification, onAuthStateChanged, signOut, sendPasswordResetEmail, signInWithEmailAndPassword} from \"firebase/auth\";\nimport {auth, storage, db} from \"../Model/firebase\"; \nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { setDoc, doc, updateDoc, deleteDoc, arrayRemove } from 'firebase/firestore';\nimport { collection, addDoc, getDoc, getDocs } from 'firebase/firestore';\n\n// Cambios por hacer: quitar los swal del controller y ponerlos en el view\nclass Controller{\n    constructor(auth){\n        this.auth = auth;\n        this.authUser = null;\n        onAuthStateChanged(auth, (user) => {\n            if (user) {\n                console.log(user);\n                this.authUser = user;\n            } else {\n                console.log(\"user null\");\n                this.authUser = null;\n            }\n        });\n    }\n\n    // sends verification email to the user\n    verifyEmail(){\n        sendEmailVerification(this.authUser)\n        .then( () => {\n            swal(\"Email Verification Sent\",\"Check your email and click the link we sent to continue.\",\"success\");\n        })\n        .catch( (error) => {\n\n            \n            switch (error.message) {\n                case \"Cannot read properties of null (reading 'getIdToken')\":\n                    swal(\"User already exists\", \"Use another email\",\"error\");\n                    break;\n            \n                default:\n                    // When this happen we should put an extra button to send the verification again!!!!\n                    swal(\"Could not send verification email\", \"Try sending it again.\",\"error\");\n                    break;\n            }\n        });\n    };\n\n    // password security checks\n    passValidation(p1, p2){\n    \n        if (p1 !== p2){ // Check the 2 password boxes\n          swal(\"Error\", \"Passwords did not match. Try Again\", \"error\")\n          return false;\n        }\n    \n        let regx = /^(?=.*[!@#?])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?!.*\\s).{8,16}$/;\n        \n        if ( p1.match(regx) ){ // contains all required characters\n          return true;\n        }\n        else{ // Does not contain all characters\n          swal(\"Error\", \"Password does not meet the requirements. Try Again\", \"error\")\n          return false;\n        }\n    };\n\n    // Creates user in the authentication service with the email and password chosen\n    // after creation, user is sent verification email\n    emailVerifyProcedure(email, password, confirmPassword){\n        if ( this.passValidation(password, confirmPassword) ){\n            createUserWithEmailAndPassword(this.auth, email, password)\n            .then( (userCredential)=>{\n                // User was added to authentication service with email and password\n                console.log(this.authUser);\n                this.verifyEmail();\n            }).catch( error => {\n                //console.log(error.message);\n                if (error.message === \"Firebase: Error (auth/email-already-in-use).\" ){\n                    // work later on sending more verification email if necessary\n                    console.log(\"sending verification again\");\n                    this.verifyEmail();\n                }\n            });    \n        }   \n    };\n\n    // Helper function to check a user's status\n    async checkCurrentUserStatus(){\n        // Create a promise so that currentUser can be created\n        await new Promise((resolve) => {\n            const checkUser = setInterval(() => {\n                if (this.auth.currentUser != null) {\n                    clearInterval(checkUser);\n                    resolve();\n                }\n            // Check every 100 miliseconds\n            }, 100);\n        });\n\n        // Destructing uid from auth.currentUser object (extract field from object)\n        const { uid } = this.auth.currentUser;\n        return uid;\n    }\n\n    // Grab users information from Firestore \n    async grab_user_info(grab_items){    \n        // Wait until currentUser is valid and grab user ID\n        const uid = await this.checkCurrentUserStatus();\n\n        const docRef = doc(db, 'users', uid);\n        const docSnap = await getDoc(docRef);\n\n        // Grab that item from the userID object\n        for( let i = 0; i < grab_items.length; i++ ) {\n            // Check for user_item in array\n            grab_items[i] = docSnap.data()[grab_items[i]];\n        }\n        return grab_items;\n    }\n\n    // Grab users image from Storage \n    async grab_user_picture(pictureType){\n        // Wait until currentUser is valid   \n        const uid = await this.checkCurrentUserStatus();\n        const image = 'users/'+uid+'/pictures/'+pictureType+'.jpg';\n        const reference = ref(storage, image);\n\n        // Create URL from reference\n        await getDownloadURL(reference).then((url) => {\n            pictureType = url;\n        });\n\n        // Return URL\n        return pictureType;\n    }\n\n    // Checks if the state of the user's email verification status is set to true\n    async checkEmailVerification(){\n        // reload state of user instance attributes before checking if the email is verified.\n        await this.authUser.reload()\n\n        if ( this.authUser.emailVerified ){ \n            swal(\"Email verification succesful\", \"Now you can continue to signup.\", \"success\");\n            return true;\n        }\n        else{\n            swal(\"Verify your email\", \"Once it is verified you will be allowed to continue.\",\"warning\");\n            return false;\n        }\n    }\n\n    async emailVerifyNext(){\n\n        if( this.authUser && await this.checkEmailVerification()) { // null or object containing user information\n            return true;\n        }\n        else{ \n            swal(\"Email not verified\", \"You must verify your email to proceed\", \"warning\")\n            return false;\n        }\n    }\n\n    sendPassReset(email){\n        sendPasswordResetEmail(this.auth, email)\n        .then(() => {\n            swal(\"Check your Inbox\", \"Password reset link sent to email!\", \"success\");\n            return true\n        })\n        .catch((error) => {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            swal(\"Ohh noo\", \"Error sending password reset link.\", \"error\");\n            return false\n        });\n    }\n\n    async loginUser(email, password){\n        try{\n            const userCredential = await signInWithEmailAndPassword(this.auth, email, password)\n            return true;\n        }\n        catch( error ){\n            return false;\n        }\n    }\n\n    userSignOut(){\n        signOut(this.auth)\n        .then( () => { console.log(\"Signed out succesfully.\") } )\n        .catch( error => console.log(error) )\n    }\n\n    // puts profile specified picture into storage\n    async uploadImage( namePicture, handletoPicture ){ \n        // Grab a reference to the location where we want to upload the image\n        const imageRef = ref( storage, 'users/'+ this.authUser.uid +'/pictures/'+ namePicture+'.jpg');\n        // Function uploadBytes returns a promise\n        return await uploadBytes( imageRef, handletoPicture );\n    };\n\n    async submitData( path, payload ){\n        // Grab a reference to the \"users collection\", with new field called \"unknown\"\n        const docReference = doc(db, path, this.authUser.uid)\n          \n        // Set new data into database\n        return await setDoc(docReference, payload);\n    }\n\n    async submitDataRandId( path, payload ){\n        const col = collection(db, path);\n        return await addDoc( col, payload);\n    }\n\n    async updateField( path, payload ){\n        const docRef = doc(db, path);\n        return await updateDoc(docRef, payload);\n    }\n\n\n    async deleteAccount( account ){\n        return await this.submitDataRandId( \"accountRequests\", {action: \"delete\", account: account, userId: this.authUser.uid} );\n    }\n\n    async deleteProfile(){\n        const userRef = doc(db, `users/${this.authUser.uid}`);\n        await deleteDoc( userRef );\n    }\n\n    async addAccount( currency ){\n        return await this.submitDataRandId( \"accountRequests\", {action: \"create\", currency: currency, userId: this.authUser.uid} );\n    }\n\n    async fundAccount( account, amount ){\n        return await this.submitDataRandId( \"accountRequests\", {action: \"fund\", account: account, amount: Number(amount), userId: this.authUser.uid} );\n    }\n\n    async transferAccounts(fromAcc, toAcc, amount){\n\n        return await this.submitDataRandId( \"accountRequests\", {action: \"transfer\", srcAcc: fromAcc, destAcc: toAcc, amount: Number(amount)} );\n        \n    }\n\n    async getBalance( msnumber ){\n        // Wait until currentUser is valid and grab user ID\n        const uid = await this.checkCurrentUserStatus();\n\n        const docRef = doc(db, 'accounts', msnumber);\n        const docSnap = await getDoc(docRef);\n\n        console.log(\"Account Data:\", docSnap.data() );\n\n        // returns an array containing [currency, funds]\n        return [docSnap.data().currency, docSnap.data().funds]\n\n    }\n\n    // adds all member information and pictures into the database.\n    async addMember(imagePath, idFilePath, path, payload){\n        let sts = true;\n        await this.submitData(path, payload).catch(()=>{sts=false;});\n        await this.uploadImage(\"profilePicture\",imagePath).catch(()=>{sts=false;});\n        await this.uploadImage(\"IDpicture\", idFilePath).catch(()=>{sts=false;});\n        // now it is done through a firebase cloud function in the backend\n        //await this.sendEmail(this.authUser.email, \"Welcome to my Stock App\", \"We hope you enjoy our service!\");\n        // sign out user's session\n        this.userSignOut();\n        \n        // could be more subtle in the future and return the type of error to the view\n        return sts;\n    }\n\n    async getStocksInfo(){\n\n        const querySnapshot = await getDocs(collection(db, \"stocks\"));\n        this.info = []\n        var stocks = this;\n        querySnapshot.forEach((doc) => {\n        stocks.info.push(JSON.parse(doc.data()))\n        });\n\n    console.log(stocks.info);\n    return stocks.info;\n   }\n\n   // Get Image out of a specific path\n   async getImage( path ){\n\n    // Wait until currentUser is valid  \n    const uid = await this.checkCurrentUserStatus();\n    const image = path;\n    const reference = ref(storage, image);\n    this.url = null;\n    var pic = this;\n    \n    // Create URL from reference\n    await getDownloadURL(reference).then((url) => {\n    pic.url = url;\n    });\n\n    // Return URL\n    return pic.url;\n    }\n}\n\nexport default Controller;"],"mappings":"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"},"metadata":{},"sourceType":"module"}