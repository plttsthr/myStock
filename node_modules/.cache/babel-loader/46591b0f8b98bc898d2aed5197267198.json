{"ast":null,"code":"import * as React from 'react';\nimport { KeyFilter } from 'primereact/keyfilter';\nimport { Tooltip } from 'primereact/tooltip';\nimport { ObjectUtils, classNames, DomHandler } from 'primereact/utils';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar InputTextBase = {\n  defaultProps: {\n    __TYPE: 'InputText',\n    keyfilter: null,\n    validateOnly: false,\n    tooltip: null,\n    tooltipOptions: null,\n    onInput: null,\n    onKeyDown: null,\n    onPaste: null,\n    children: undefined\n  },\n  getProps: function getProps(props) {\n    return ObjectUtils.getMergedProps(props, InputTextBase.defaultProps);\n  },\n  getOtherProps: function getOtherProps(props) {\n    return ObjectUtils.getDiffProps(props, InputTextBase.defaultProps);\n  }\n};\nvar InputText = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var props = InputTextBase.getProps(inProps);\n  var elementRef = React.useRef(ref);\n  var onKeyDown = function onKeyDown(event) {\n    props.onKeyDown && props.onKeyDown(event);\n    if (props.keyfilter) {\n      KeyFilter.onKeyPress(event, props.keyfilter, props.validateOnly);\n    }\n  };\n  var onInput = function onInput(event) {\n    var validatePattern = true;\n    if (props.keyfilter && props.validateOnly) {\n      validatePattern = KeyFilter.validate(event, props.keyfilter);\n    }\n    props.onInput && props.onInput(event, validatePattern);\n    if (!props.onChange) {\n      var target = event.target;\n      ObjectUtils.isNotEmpty(target.value) ? DomHandler.addClass(target, 'p-filled') : DomHandler.removeClass(target, 'p-filled');\n    }\n  };\n  var onPaste = function onPaste(event) {\n    props.onPaste && props.onPaste(event);\n    if (props.keyfilter) {\n      KeyFilter.onPaste(event, props.keyfilter, props.validateOnly);\n    }\n  };\n  var currentValue = elementRef.current && elementRef.current.value;\n  var isFilled = React.useMemo(function () {\n    return ObjectUtils.isNotEmpty(props.value) || ObjectUtils.isNotEmpty(props.defaultValue) || ObjectUtils.isNotEmpty(currentValue);\n  }, [props.value, props.defaultValue, currentValue]);\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(elementRef, ref);\n  }, [elementRef, ref]);\n  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);\n  var otherProps = InputTextBase.getOtherProps(props);\n  var className = classNames('p-inputtext p-component', {\n    'p-disabled': props.disabled,\n    'p-filled': isFilled\n  }, props.className);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    ref: elementRef\n  }, otherProps, {\n    className: className,\n    onInput: onInput,\n    onKeyDown: onKeyDown,\n    onPaste: onPaste\n  })), hasTooltip && /*#__PURE__*/React.createElement(Tooltip, _extends({\n    target: elementRef,\n    content: props.tooltip\n  }, props.tooltipOptions)));\n}));\nInputText.displayName = 'InputText';\nexport { InputText };","map":null,"metadata":{},"sourceType":"module"}