{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"/Users/paulette./Documents/GitHub/MyStockApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\nrequire(\"core-js/modules/es.string.includes.js\");\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _findIndexAfterMovement = _interopRequireDefault(require(\"./_lib/findIndexAfterMovement\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar useFieldFormatter = function useFieldFormatter(formatter, onChange) {\n  var refProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ref';\n  var _react$default$useSta = _react.default.useState(null),\n    _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n    position = _react$default$useSta2[0],\n    setPosition = _react$default$useSta2[1];\n  var inputRef = _react.default.useRef();\n  if (typeof onChange !== 'function') {\n    throw new TypeError('Argument must be passed for onChange and must be a function that accepts a new value.');\n  }\n  _react.default.useEffect(function () {\n    var input = inputRef.current;\n    if (input) {\n      input === null || input === void 0 ? void 0 : input.setSelectionRange(position, position);\n    }\n  }, [inputRef, position]);\n  var handleChange = function handleChange(event) {\n    var options = {};\n    var target = event.target;\n    var thisValue = formatter(target.value);\n    var diff = thisValue.length - target.value.length;\n    var selectionStart = target.selectionStart;\n    var selectionEnd = target.selectionEnd;\n    var inputType = event.nativeEvent.inputType;\n    var isMidText = selectionEnd < thisValue.length - 1;\n    var backspaceType = '';\n    if (!!inputType && inputType.includes('deleteContent')) {\n      backspaceType += inputType.includes('Backward') ? 'backspace' : 'delete';\n    }\n    var backspaceDetected = backspaceType !== '' && selectionStart === selectionEnd;\n    if (backspaceDetected) {\n      var optionKey = \"\".concat(backspaceType, \"At\");\n      options[optionKey] = selectionEnd;\n    }\n    onChange(formatter(thisValue, options)); // Set caret position\n\n    if (backspaceDetected) {\n      var newCaretPosition = (0, _findIndexAfterMovement.default)(thisValue, selectionStart, backspaceType === 'delete');\n      setPosition(newCaretPosition);\n    } else if (inputType === 'insertText') {\n      var endTextPos = selectionEnd + diff;\n      var adjustedMidTextPos = (0, _findIndexAfterMovement.default)(thisValue, selectionEnd, true);\n      setPosition(isMidText ? adjustedMidTextPos : endTextPos);\n    }\n  };\n  return _defineProperty({\n    onChange: handleChange\n  }, refProp, inputRef);\n};\nvar _default = useFieldFormatter;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}